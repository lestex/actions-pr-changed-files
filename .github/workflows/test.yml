name: Test

on:
  pull_request:
  push:

jobs:
  debug:
    name: Debug
    runs-on: ubuntu-latest
    steps:
      - name: Print environment variables
        run: env

      - name: Print events.json
        run: cat "$GITHUB_EVENT_PATH"

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3.7.0
        with:
          node-version: '19'

      - name: Install dependencies
        run: |
          yarn

      - name: Clean, build, format, lint, package, and test
        run: |
          yarn all

      - name: Check if packaged properly
        run: |
          # If there are any unstaged or untracked files in 'dist/', then the action wasn't packaged properly
          if git diff --name-only | grep '^dist/' || git ls-files --other --exclude-standard | grep '^dist/'; then
            echo "You didn't package the action properly before pushing to remote." \
            echo "Always run 'yarn all' before staging a commit."
            echo "Below are the modified files in 'dist/' after running 'yarn && rm -rf dist/ && yarn all':"
            git diff --name-only | grep '^dist/'
            git ls-files --other --exclude-standard | grep '^dist/'
            exit 1
          fi

  test:
    name: Test
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.changed-files.outputs.files }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run the action
        id: changed-files
        uses: ./

      - name: Print steps context output
        run: |
          echo ${{ steps.changed-files.outputs.files }}
          echo ${{ steps.changed-files.outputs.sha }}
          echo ${{ steps.changed-files.outputs.msg }}
          
  test-matrix:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      fail-fast: false
      matrix:
        file: ${{ fromJSON(needs.test.outputs.files) }}
        
    steps:
      - name: Echo file from matrix
        run:
          echo ${{ matrix.file }}
    
